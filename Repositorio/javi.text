<regex>
<name>torete5</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m,url= '$doregex[getUrl]'):
    import re, requests, resolveurl, xbmc
    if 'gamo' in url:
        try:
            from resolveurl.plugins.lib import jsunpack
            ua = 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
            url='$doregex[getUrl]'
            s=requests.session()
            rsource=s.get(url, headers={'User-Agent': ua},  verify=False)
            source=s.get(url, headers={'User-Agent': ua},  verify=False)
            pack = re.findall('javascript.*?(eval\(function\(p,a,c,k,e,d.*)', source.text)[0]
            unpack=jsunpack.unpack(pack).replace('\\', '')
            return re.findall('file:\s*"(http.*?)"', unpack)[0]+'|User-Agent='+ua
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
    if 'prostream' in url:
        try:
            from resolveurl.plugins.lib import jsunpack
            ua = 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
            url='$doregex[getUrl]'
            s=requests.session()
            rsource=s.get(url, headers={'User-Agent': ua},  verify=False)
            source=s.get(url, headers={'User-Agent': ua},  verify=False)
            pack = re.findall('javascript.*?(eval\(function\(p,a,c,k,e,d.*)', source.text)[0]
            unpack=jsunpack.unpack(pack).replace('\\', '')
            return re.findall('sources:."(http.*?)"', unpack)[0]+'|User-Agent='+ua
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
    if 'clipwat' in url:
        a = re.findall('res: (1080|720|360)',requests.get('$doregex[getUrl]',headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'},verify=False).content)[0]
        if '1080' in a:
            return re.findall('(https.*?mp4).. type: .*? res: 1080',requests.get('$doregex[getUrl]',headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'},verify=False).content)[0]    
        if '720' in a:
            return re.findall('(https.*?mp4).. type: .*? res: 720',requests.get('$doregex[getUrl]',headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'},verify=False).content)[0]
        if '360' in a:
            return re.findall('(https.*?mp4).. type: .*? res: 360',requests.get('$doregex[getUrl]',headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'},verify=False).content)[0]
    if 'onlystream' in url:
        import re,requests,HTMLParser,cfscrape
        ua='Mozilla/5.0 (Windows NT 10; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'
        scraper = cfscrape.create_scraper()
        source=scraper.get("$doregex[getUrl]", headers={'User-Agent': ua}, verify=False)
        return re.findall('Src...src: "(.*?)"',source.content)[0]
    elif 'fli' in url:
        try:
            from resolveurl.plugins.lib import jsunpack
            ua = 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
            url='$doregex[getUrl]'
            s=requests.session()
            rsource=s.get(url, headers={'User-Agent': ua},  verify=False)
            source=s.get(url, headers={'User-Agent': ua},  verify=False)
            pack = re.findall('javascript.*?(eval\(function\(p,a,c,k,e,d.*)', source.text)[0]
            unpack=jsunpack.unpack(pack).replace('\\', '')
            return re.findall('file:\s*"(http.*?)"', unpack)[0]+'|User-Agent='+ua
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
    elif 'playedvid' in url:
        try:
            from resolveurl.plugins.lib import jsunpack
            ua = 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
            url='$doregex[getUrl]'
            s=requests.session()
            rsource=s.get(url, headers={'User-Agent': ua},  verify=False)
            source=s.get(url, headers={'User-Agent': ua},  verify=False)
            pack = re.findall('javascript.*?(eval\(function\(p,a,c,k,e,d.*)', source.text)[0]
            unpack=jsunpack.unpack(pack).replace('\\', '')
            return re.findall('sources:..*?src:"(.*?)"', unpack)[0]+'|User-Agent='+ua
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
    elif 'jetload' in url:
        try:
            return re.findall('(http.*?m3u8)',requests.get('$doregex[getUrl]',headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36', 'Referer': '$doregex[getUrl]', 'Origin': 'https://jetload.net/'},verify=False).content)[0]
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
    
    else:
        try:
            url= '$doregex[getUrl]'
            u = resolveurl.resolve(url)        
            return u
        except:
            u = xbmc.executebuiltin('XBMC.Notification([B][LOWERCASE][CAPITALIZE][COLOR white]enlace  [COLOR red]borrado [/CAPITALIZE][/LOWERCASE][/B][/COLOR],[B][LOWERCASE][CAPITALIZE][COLOR white]elige otro [/CAPITALIZE][/LOWERCASE][/B][/COLOR], 4000)')  
        return u
]]></expres>
<page></page>
<referer></referer>
</regex>