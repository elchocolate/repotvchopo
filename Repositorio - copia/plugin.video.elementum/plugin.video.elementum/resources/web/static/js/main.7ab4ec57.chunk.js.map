{"version":3,"sources":["Services/settings.ts","static/logo.png","menu/index.tsx","search-bar/index.tsx","delete-modal/index.tsx","upload-modal/index.tsx","dataStructure.ts","torrents-list/torrent/index.tsx","torrents-list/index.tsx","torrent-info/piece-map.tsx","torrent-info/index.tsx","App.tsx","index.tsx"],"names":["refreshRateSettingName","getRefreshRate","refreshRate","window","localStorage","getItem","Number","HeaderMenu","useState","refreshRateInSeconds","setRefreshRate","Menu","borderless","style","border","Item","header","as","href","Image","size","src","logo","Dropdown","item","text","icon","onClick","fetch","Modal","trigger","position","closeIcon","Header","content","Content","Form","Group","inline","Field","htmlFor","Input","type","min","labelPosition","value","onChange","_event","data","id","Label","Actions","Button","_data","refreshRateInMs","setItem","toString","saveRefreshRate","location","reload","positive","torrentTypes","initialState","loading","results","queryReducer","state","action","query","selection","resultRenderer","result","ItemGroup","image","title","Meta","tagline","Description","description","mediatype","Extra","rating","genre","join","date","year","getSearchType","torrentType","querySearchResults","url","dispatch","a","response","json","items","filter","i","undefined","info","map","art","thumb","key","code","label","plotoutline","path","Statistics","totalDownloadRate","totalUploadRate","active","finished","total","setTorrentType","searcRef","useRef","useReducer","debounceSearchChange","useDebouncedCallback","searchType","handleQueryChange","trim","length","handleResultSelect","replace","includes","current","open","Grid","stackable","columns","Row","verticalAlign","Column","floated","Search","fluid","placeholder","onSearchChange","_","onResultSelect","ref","minCharacters","input","options","defaultValue","torrentTypeValue","width","Statistic","widths","Value","Icon","name","toFixed","DeleteTorrentModal","torrents","setOpen","deleteFiles","setDeleteFiles","hasSelectedTorrent","onClose","Popup","display","disabled","closeOnTriggerClick","inverted","t","Message","negative","Checkbox","e","checked","color","UploadTorrentModal","StatusCode","React","uri","setUri","file","setFile","addTorrent","additionalData","formData","FormData","append","forEach","x","method","body","onOpen","primary","target","accept","files","TorrentListItem","torrent","isSelected","onSetActiveTorrents","isActive","status_code","StatusFinished","StatusPaused","onResumePause","event","stopPropagation","onPlay","Table","ctrlKey","activeTorrents","activeTorrentIndex","findIndex","Cell","Progress","percent","progress","autoSuccess","indicating","textAlign","Detail","status","StatisticGroup","ratio","time_ratio","StatisticValue","download_rate","StatisticLabel","upload_rate","seeders","seeders_total","peers","peers_total","basic","toggle","memo","isEqual","column","order","sortReducer","orderByColumn","orderBy","newDirection","flatMap","at","find","TorrentList","useEffect","getSortOrder","columnName","changeColumnSortOrder","compact","fixed","singleLine","selectable","sortable","className","HeaderCell","sorted","Body","some","Footer","fullWidth","colSpan","PieceMap","pieces","canvasRef","parentDivRef","useResizeObserver","useDebounce","debouncedWidth","canvas","context","getContext","parentDiv","parentWidth","clientWidth","piecesPerLine","Math","floor","PieceSize","height","ceil","pieceColor","fillStyle","fillRect","legendHeight","y","font","pieceSize","drawLegendItem","fillText","drawLegend","draw","renderFileTree","fileTree","tree","f","parentNode","pathChunk","getFileTree","List","renderTree","Object","keys","k","isFolder","TorrentInfo","filesList","setFilesList","piecesList","setPiecesList","setLoading","getInfo","regexp","RegExp","match","exec","groups","split","p","intervalHandle","setInterval","clearInterval","panes","menuItem","render","Tab","Pane","GridRow","GridColumn","seeding_time","seed_time_limit","prettyBytes","total_download","total_upload","App","setTorrents","setActiveTorrents","getList","fetchedTorrents","reduce","rate","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ab4ec57.chunk.js","sourcesContent":["const refreshRateSettingName = 'refreshRate';\nconst defaultRefreshRate = 5000;\n\nexport const saveRefreshRate = (refreshRate: number): void => {\n  const refreshRateInMs = refreshRate;\n  window.localStorage.setItem(refreshRateSettingName, refreshRateInMs.toString());\n};\n\nexport const getRefreshRate = (): number => {\n  const refreshRate = window.localStorage.getItem(refreshRateSettingName);\n  return Number(refreshRate ?? defaultRefreshRate);\n};\n","export default __webpack_public_path__ + \"static/media/logo.4754a3cb.png\";","import React, { useState } from 'react';\nimport { Menu, Image, Modal, Form, Label, Input, Button, Dropdown } from 'semantic-ui-react';\nimport { saveRefreshRate, getRefreshRate } from '../Services/settings';\nimport logo from '../static/logo.png';\n\nconst HeaderMenu = (): JSX.Element => {\n  const [refreshRateInSeconds, setRefreshRate] = useState<number>(() => getRefreshRate() / 1000);\n\n  const SaveSettings = (_event: unknown, _data: unknown) => {\n    const refreshRate = refreshRateInSeconds < 1 ? 1 : refreshRateInSeconds;\n    saveRefreshRate(refreshRate * 1000);\n    window.location.reload();\n  };\n\n  const StartAll = () => {\n    void fetch('/torrents/resume');\n  };\n\n  const PauseAll = () => {\n    void fetch('/torrents/pause');\n  };\n\n  return (\n    <Menu borderless style={{ border: 'none' }}>\n      <Menu.Item header as=\"a\" href=\"/web\">\n        <Image size=\"mini\" src={logo} />\n        Elementum\n      </Menu.Item>\n      <Dropdown item text=\"Torrents\">\n        <Dropdown.Menu>\n          <Dropdown.Item icon=\"download\" text=\"Start all\" onClick={StartAll} />\n          <Dropdown.Item icon=\"pause\" text=\"Pause all\" onClick={PauseAll} />\n        </Dropdown.Menu>\n      </Dropdown>\n      <Modal trigger={<Menu.Item position=\"right\">Settings</Menu.Item>} closeIcon>\n        <Modal.Header content=\"Settings\" />\n        <Modal.Content>\n          <Form>\n            <Form.Group inline>\n              <Form.Field>\n                <label htmlFor=\"refresh-rate\">Refresh rate:</label>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  labelPosition=\"right\"\n                  value={refreshRateInSeconds}\n                  onChange={(_event, data) => setRefreshRate(Number(data.value))}\n                >\n                  <input id=\"refresh-rate\" />\n                  <Label>Seconds</Label>\n                </Input>\n              </Form.Field>\n            </Form.Group>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={SaveSettings} positive>\n            Save\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </Menu>\n  );\n};\n\nexport default HeaderMenu;\n","import React, { FC, useReducer, useRef, useState } from 'react';\nimport { Dropdown, DropdownItemProps, Grid, Icon, Item, ItemGroup, Search, SearchResultProps, Statistic } from 'semantic-ui-react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst debounceWaitTime = 500;\n\ntype TorrentType = 'Movies' | 'TvShows' | 'General';\nconst torrentTypes: DropdownItemProps[] = [\n  {\n    text: 'Movies',\n    value: 'Movies',\n    icon: 'film',\n  },\n  {\n    text: 'TV Shows',\n    value: 'TvShows',\n    icon: 'tv',\n  },\n  {\n    text: 'General',\n    value: 'General',\n    icon: 'magnet',\n  },\n];\n\ntype Action =\n  | { type: 'CleanQuery' }\n  | { type: 'StartSearch'; query: string }\n  | { type: 'FinishSearch'; results: ResultView[] }\n  | { type: 'UpdateSelection'; selection: string };\n\ntype MediaType = 'movie' | 'tvshow' | 'season' | 'episode';\ninterface Info {\n  plotoutline: string;\n  tagline: string;\n  code: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  mediatype: MediaType;\n}\n\ninterface Art {\n  thumb: string;\n}\n\ninterface Result {\n  label: string;\n  info: Info;\n  art: Art;\n  path: string;\n  is_playable: boolean;\n}\n\ninterface ResultView {\n  title: string;\n  tagline: string;\n  description: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  image: string;\n  path: string;\n  mediatype: MediaType;\n  key: string;\n}\n\ninterface State {\n  loading: boolean;\n  results: ResultView[];\n  value: string;\n}\n\nconst initialState: State = {\n  loading: false,\n  results: [],\n  value: '',\n};\n\nfunction queryReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'CleanQuery':\n      return initialState;\n    case 'StartSearch':\n      return { ...state, loading: true, value: action.query };\n    case 'FinishSearch':\n      return { ...state, loading: false, results: action.results };\n    case 'UpdateSelection':\n      return { ...state, value: action.selection };\n  }\n}\n\nconst resultRenderer = (item: SearchResultProps) => {\n  const result = item as ResultView;\n  return (\n    <ItemGroup>\n      <Item>\n        <Item.Image size=\"small\" src={result.image} />\n        <Item.Content>\n          <Item.Header>{result.title}</Item.Header>\n          <Item.Meta>{result.tagline}</Item.Meta>\n          <Item.Description>{result.description}</Item.Description>\n          {result.mediatype !== 'season' && (\n            <Item.Extra>{`${result.rating} - ${result.genre?.join(', ')} - ${result.date?.toString() ?? result.year ?? '-'}`}</Item.Extra>\n          )}\n        </Item.Content>\n      </Item>\n    </ItemGroup>\n  );\n};\n\nfunction getSearchType(torrentType: TorrentType): string {\n  switch (torrentType) {\n    case 'Movies':\n      return 'movies';\n    case 'TvShows':\n      return 'shows';\n    case 'General':\n      return '.';\n  }\n}\n\nasync function querySearchResults(url: string, dispatch: React.Dispatch<Action>) {\n  const response = await fetch(url);\n  const items = (await response.json()).items as Result[];\n\n  dispatch({\n    type: 'FinishSearch',\n    results: items\n      .filter((i) => i.info !== undefined)\n      .map((i) => ({\n        image: i.art.thumb,\n        key: `${i.info.code}-${i.label}`,\n        description: i.info.plotoutline,\n        title: i.label,\n        tagline: i.info.tagline,\n        year: i.info.year,\n        date: i.info.date,\n        genre: i.info.genre,\n        rating: i.info.rating,\n        mediatype: i.info.mediatype,\n        path: i.path,\n      })),\n  });\n}\n\ninterface IStatisticsProps {\n  /**\n   * Total download rate in kB/s\n   */\n  totalDownloadRate: number;\n\n  /**\n   * Total upload rate in kB/s\n   */\n  totalUploadRate: number;\n\n  /**\n   * Active torrents\n   */\n  active: number;\n\n  /**\n   * Finished torrents\n   */\n  finished: number;\n\n  /**\n   * Total torrents\n   */\n  total: number;\n}\n\nconst Statistics: FC<IStatisticsProps> = ({ totalDownloadRate, totalUploadRate, active, finished, total }: IStatisticsProps) => {\n  const [torrentType, setTorrentType] = useState<TorrentType>('Movies');\n  const searcRef = useRef<any>();\n  const [state, dispatch] = useReducer(queryReducer, initialState);\n  const { loading, results, value } = state;\n\n  const debounceSearchChange = useDebouncedCallback(async (query: string) => {\n    const searchType = getSearchType(torrentType);\n\n    await querySearchResults(`/${searchType}/search?q=${query}`, dispatch);\n  }, debounceWaitTime);\n\n  const handleQueryChange = async (query: string) => {\n    dispatch({\n      type: 'StartSearch',\n      query,\n    });\n\n    if (query.trim().length === 0) {\n      dispatch({\n        type: 'CleanQuery',\n      });\n      return;\n    }\n\n    await debounceSearchChange(query);\n  };\n\n  const handleResultSelect = async (data: ResultView): Promise<void> => {\n    const path = data.path.replace('plugin://plugin.video.elementum/', '');\n    const url = `/${path}?external=1`;\n\n    switch (torrentType) {\n      case 'Movies':\n        await fetch(url);\n        break;\n      case 'TvShows': {\n        dispatch({\n          type: 'StartSearch',\n          query: value,\n        });\n\n        if (path.includes('links')) {\n          await fetch(url);\n        } else {\n          await querySearchResults(url, dispatch);\n          searcRef.current.open();\n        }\n        break;\n      }\n      case 'General':\n        break;\n    }\n  };\n\n  const handleTorrentTypeChange = (torrentTypeValue: TorrentType) => {\n    setTorrentType(torrentTypeValue);\n    dispatch({\n      type: 'CleanQuery',\n    });\n  };\n\n  return (\n    <>\n      <Grid stackable columns=\"3\">\n        <Grid.Row verticalAlign=\"middle\">\n          <Grid.Column floated=\"left\">\n            <Search\n              fluid\n              placeholder=\"Search\"\n              loading={loading}\n              results={results}\n              value={value}\n              onSearchChange={(_, data) => handleQueryChange(data.value ?? '')}\n              resultRenderer={resultRenderer}\n              onResultSelect={(_, data) => handleResultSelect(data.result)}\n              ref={searcRef}\n              minCharacters={3}\n              input={{\n                icon: 'search',\n                action: (\n                  <Dropdown\n                    fluid\n                    selection\n                    options={torrentTypes}\n                    defaultValue={torrentTypes[0].value}\n                    onChange={(_, data) => handleTorrentTypeChange(data.value as TorrentType)}\n                  />\n                ),\n              }}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"3\">\n            <Statistic.Group widths=\"3\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>{active}</Statistic.Value>\n                <Statistic.Label>Active</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{finished}</Statistic.Value>\n                <Statistic.Label>Finished</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{total}</Statistic.Value>\n                <Statistic.Label>Total</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n          <Grid.Column floated=\"right\">\n            <Statistic.Group widths=\"2\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow down\" size=\"small\" />\n                  {` ${totalDownloadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow up\" size=\"small\" />\n                  {` ${totalUploadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default Statistics;\n","import React, { useState } from 'react';\nimport { Button, Checkbox, Message, Modal, Popup } from 'semantic-ui-react';\nimport { ITorrent } from '../dataStructure';\n\ninterface ITorrentListProps {\n  torrents: ITorrent[];\n}\n\nconst DeleteTorrentModal = ({ torrents }: ITorrentListProps): JSX.Element => {\n  const [open, setOpen] = useState(false);\n  const [deleteFiles, setDeleteFiles] = useState(false);\n  const hasSelectedTorrent = torrents.length > 0;\n\n  // TODO: handle response\n  // TODO: update list after executing fetch\n  function deleteSelectedTorrent() {\n    torrents.map((t) => fetch(`/torrents/delete/${t.id}?files=${deleteFiles}`));\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      open={open}\n      trigger={\n        <Popup\n          trigger={\n            <div style={{ display: 'inline-block' }}>\n              <Button content=\"Delete\" disabled={!hasSelectedTorrent} onClick={(_, _data) => setOpen(true)} />\n            </div>\n          }\n          content=\"Select a torrent first\"\n          disabled={hasSelectedTorrent}\n          closeOnTriggerClick={false}\n          inverted\n        />\n      }\n    >\n      <Modal.Header>{torrents.length === 1 ? `Delete ${torrents[0].name}` : `Delete ${torrents.length} torrents?`} </Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          Are you sure you want to delete\n          {torrents.length === 1 ? (\n            <>\n              <b> {torrents[0].name}</b>?\n            </>\n          ) : (\n            <>\n              <> these {torrents.length} torrents?</>\n              <ol>\n                {torrents.map((t) => (\n                  <li>\n                    <b>{t.name}</b>\n                  </li>\n                ))}\n              </ol>\n            </>\n          )}\n          <Message negative>\n            <Checkbox label=\"Also delete files\" onChange={(e, data) => setDeleteFiles(data.checked ?? false)} />\n          </Message>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"No\" icon=\"undo\" onClick={() => setOpen(false)} />\n        <Button content=\"Yes\" icon=\"trash\" color=\"red\" onClick={() => deleteSelectedTorrent()} />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default DeleteTorrentModal;\n","import React from 'react';\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react';\n\nfunction UploadTorrentModal(): JSX.Element {\n  const [open, setOpen] = React.useState(false);\n  const [uri, setUri] = React.useState('');\n  const [file, setFile] = React.useState<File>();\n\n  async function addTorrent(path: string, additionalData?: [name: string, value: string][]) {\n    const formData = new FormData();\n    formData.append('uri', uri);\n    formData.append('file', file ?? 'null');\n    additionalData?.forEach((x) => formData.append(x[0], x[1]));\n\n    await fetch(path, {\n      method: 'POST',\n      body: formData,\n    });\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={\n        <Button icon labelPosition=\"left\" floated=\"right\" primary>\n          <Icon name=\"download\" />\n          Add Torrent\n        </Button>\n      }\n    >\n      <Modal.Header>Add Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Form>\n            <Form.Input placeholder=\"Magnet or Torrent file URL\" onChange={(e) => setUri(e.target.value)} />\n            <Form.Input type=\"file\" accept=\".torrent\" onChange={(e) => setFile(e.target.files?.item(0) ?? undefined)} />\n          </Form>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"Cancel\" color=\"red\" onClick={() => setOpen(false)} />\n        <Button\n          content=\"Add (all files)\"\n          labelPosition=\"left\"\n          icon=\"download\"\n          color=\"yellow\"\n          onClick={() => addTorrent('/torrents/add', [['all', '1']])}\n        />\n        <Button content=\"Add\" labelPosition=\"left\" icon=\"download\" color=\"blue\" onClick={() => addTorrent('/torrents/add')} />\n        <Button content=\"Stream\" labelPosition=\"left\" icon=\"play\" color=\"green\" onClick={() => addTorrent('/playuri')} />\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default UploadTorrentModal;\n","export enum StatusCode {\n  StatusQueued = 0,\n  StatusChecking,\n  StatusFinding,\n  StatusDownloading,\n  StatusFinished,\n  StatusSeeding,\n  StatusAllocating,\n  StatusStalled,\n  StatusPaused,\n  StatusBuffering,\n  StatusPlaying,\n}\n\nexport interface ITorrent {\n  status: string;\n  status_code: StatusCode;\n  progress: number;\n  name: string;\n  download_rate: number;\n  id: string;\n  added_time: number;\n  peers: number;\n  peers_total: number;\n  ratio: number;\n  seed_time: number;\n  seed_time_limit: number;\n  seeders: number;\n  seeders_total: number;\n  seeding_time: string;\n  size: string;\n  size_bytes: number;\n  time_ratio: number;\n  upload_rate: number;\n  total_download: number;\n  total_upload: number;\n}\n","import React from 'react';\nimport isEqual from 'react-fast-compare';\nimport {\n  Button,\n  ButtonProps,\n  Icon,\n  Label,\n  Progress,\n  Statistic,\n  StatisticGroup,\n  StatisticLabel,\n  StatisticValue,\n  Table,\n} from 'semantic-ui-react';\nimport { ITorrent, StatusCode } from '../../dataStructure';\n\ninterface ITorrentListItemProps {\n  torrent: ITorrent;\n  isSelected: boolean;\n  onSetActiveTorrents: React.Dispatch<React.SetStateAction<ITorrent[]>>;\n}\n\nconst TorrentListItem = ({ torrent, isSelected, onSetActiveTorrents }: ITorrentListItemProps): JSX.Element => {\n  const isActive = torrent.status_code !== StatusCode.StatusFinished && torrent.status_code !== StatusCode.StatusPaused;\n\n  const onResumePause = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, data: ButtonProps) => {\n    event.stopPropagation();\n    const { active } = data;\n    const action = active ? 'pause' : 'resume';\n\n    await fetch(`/torrents/${action}/${torrent.id}`);\n  };\n\n  const onPlay = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, _data: ButtonProps) => {\n    event.stopPropagation();\n    await fetch(`/playuri?resume=${torrent.id}`);\n  };\n\n  /**\n   * Select a torrent from the torrent list.\n   * By default it sets active torrents to the last clicked torrent element,\n   * but it also supports multiselect using Ctrl-key. In this case normal rules apply:\n   * if a torrent wasn't previously selected - add it to the list of selected torrents,\n   * otherwise - remove it from the list.\n   */\n  const onClick = (event: React.MouseEvent) => {\n    if (!event.ctrlKey) {\n      onSetActiveTorrents(isSelected ? [] : [torrent]);\n    } else {\n      onSetActiveTorrents((activeTorrents) => {\n        const activeTorrentIndex = activeTorrents.findIndex((t) => t.id === torrent.id);\n        if (activeTorrentIndex === -1) {\n          return [...activeTorrents, torrent];\n        }\n        return activeTorrents.filter((_, i) => i !== activeTorrentIndex);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Table.Row onClick={onClick} active={isSelected}>\n        <Table.Cell>\n          <span title={torrent.name}>{torrent.name}</span>\n          <Progress percent={torrent.progress} title={`${torrent.progress.toFixed(2)}%`} autoSuccess indicating={isActive} size=\"tiny\" />\n        </Table.Cell>\n        <Table.Cell textAlign=\"center\">\n          <Label color={isActive ? 'green' : undefined}>\n            {torrent.size}\n            <Label.Detail>{torrent.status}</Label.Detail>\n          </Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup size=\"mini\" widths=\"2\">\n            <Statistic value={torrent.ratio.toFixed(2)} label=\"Seed ratio\" />\n            <Statistic value={`${torrent.time_ratio.toFixed(2)}`} label=\"Time ratio\" />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow down\" size=\"small\" />\n                {` ${torrent.download_rate.toFixed(2)}`}\n              </StatisticValue>\n              <StatisticLabel>kB/s</StatisticLabel>\n            </Statistic>\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow up\" size=\"small\" />\n                {` ${torrent.upload_rate.toFixed(2)}`}\n              </StatisticValue>\n              <StatisticLabel>kB/s</StatisticLabel>\n            </Statistic>\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic value={`${torrent.seeders} / ${torrent.seeders_total}`} label=\"Active / Total\" />\n            <Statistic value={`${torrent.peers} / ${torrent.peers_total}`} label=\"Active / Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell textAlign=\"center\">\n          <Button.Group basic fluid size=\"tiny\">\n            <Button icon={isActive ? 'pause' : 'download'} toggle active={isActive} onClick={onResumePause} />\n            <Button icon=\"play\" onClick={onPlay} title=\"Play in Kodi\" />\n          </Button.Group>\n        </Table.Cell>\n      </Table.Row>\n    </>\n  );\n};\n\nexport default React.memo(TorrentListItem, isEqual);\n","import React, { FC, useEffect, useReducer } from 'react';\nimport { StrictTableHeaderCellProps, Table } from 'semantic-ui-react';\nimport { orderBy } from 'lodash-es';\nimport DeleteTorrentModal from '../delete-modal';\nimport UploadTorrentModal from '../upload-modal';\nimport TorrentListItem from './torrent';\nimport { ITorrent } from '../dataStructure';\n\ninterface ITorrentListProps {\n  torrents: ITorrent[];\n  activeTorrents: ITorrent[];\n  onSetActiveTorrents: React.Dispatch<React.SetStateAction<ITorrent[]>>;\n}\n\ntype LodashSortOrder = 'asc' | 'desc' | undefined;\n\ninterface State {\n  column: keyof ITorrent | null;\n  data: ITorrent[];\n  order: LodashSortOrder;\n}\n\ntype Action =\n  | { type: 'CHANGE_SORT'; column: keyof ITorrent }\n  | { type: 'UPDATE_TORRENTS'; torrents: ITorrent[]; onSetActiveTorrents: React.Dispatch<React.SetStateAction<ITorrent[]>> };\n\nconst initialState: State = {\n  column: null,\n  data: [],\n  order: undefined,\n};\n\nfunction sortReducer(state: State, action: Action): State {\n  const orderByColumn = (torrents: ITorrent[], column: string, order: NonNullable<LodashSortOrder>) =>\n    orderBy(torrents, [column, 'added_time'], [order, 'asc']);\n\n  switch (action.type) {\n    case 'CHANGE_SORT': {\n      let newDirection: LodashSortOrder;\n      let { column } = action;\n\n      if (state.column === action.column) {\n        // Cycle sort order: ascending -> descending -> default (sort by the default field) -> ascending\n        switch (state.order) {\n          case 'asc':\n            newDirection = 'desc';\n            break;\n          case 'desc':\n            column = 'added_time';\n            newDirection = 'asc';\n            break;\n          case undefined:\n            newDirection = 'asc';\n            break;\n        }\n      } else {\n        newDirection = 'asc';\n      }\n\n      return {\n        ...state,\n        column,\n        data: orderByColumn(state.data, column, newDirection),\n        order: newDirection,\n      };\n    }\n    case 'UPDATE_TORRENTS': {\n      const { torrents, onSetActiveTorrents } = action;\n      onSetActiveTorrents((activeTorrents) => activeTorrents.flatMap((at) => torrents.find((t) => t.id === at.id) ?? []));\n      return {\n        ...state,\n        data: state.column && state.order ? orderByColumn(torrents, state.column, state.order) : torrents,\n      };\n    }\n  }\n}\n\nconst TorrentList: FC<ITorrentListProps> = ({ torrents, activeTorrents, onSetActiveTorrents }: ITorrentListProps) => {\n  const [state, dispatch] = useReducer(sortReducer, initialState);\n  const { column, data, order } = state;\n\n  useEffect(() => {\n    dispatch({ type: 'UPDATE_TORRENTS', torrents, onSetActiveTorrents });\n  }, [torrents, onSetActiveTorrents]);\n\n  const getSortOrder = (columnName: keyof ITorrent): StrictTableHeaderCellProps['sorted'] => {\n    if (column !== columnName) return undefined;\n\n    switch (order) {\n      case 'asc':\n        return 'ascending';\n      case 'desc':\n        return 'descending';\n      case undefined:\n        return undefined;\n    }\n  };\n\n  const changeColumnSortOrder = (columnName: keyof ITorrent) => dispatch({ type: 'CHANGE_SORT', column: columnName });\n\n  return (\n    <>\n      <Table compact=\"very\" size=\"small\" stackable fixed singleLine selectable sortable>\n        <Table.Header className=\"mobile-hidden\">\n          <Table.Row>\n            <Table.HeaderCell width=\"11\" sorted={getSortOrder('name')} onClick={() => changeColumnSortOrder('name')}>\n              Name\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"4\" sorted={getSortOrder('size_bytes')} onClick={() => changeColumnSortOrder('size_bytes')}>\n              Size / Status\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"5\" sorted={getSortOrder('ratio')} onClick={() => changeColumnSortOrder('ratio')}>\n              Ratios\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"5\" sorted={getSortOrder('download_rate')} onClick={() => changeColumnSortOrder('download_rate')}>\n              Rates\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"5\" sorted={getSortOrder('seeders')} onClick={() => changeColumnSortOrder('seeders')}>\n              Seeds / Peers\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"3\" />\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.map((t) => (\n            <TorrentListItem\n              key={t.id}\n              torrent={t}\n              onSetActiveTorrents={onSetActiveTorrents}\n              isSelected={activeTorrents.some((at) => at.id === t.id)}\n            />\n          ))}\n        </Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            <Table.HeaderCell colSpan={11}>\n              <UploadTorrentModal />\n              <DeleteTorrentModal torrents={activeTorrents} />\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </>\n  );\n};\n\nexport default TorrentList;\n","import React, { useEffect, useRef } from 'react';\nimport { useDebounce } from 'use-debounce/lib';\nimport useResizeObserver from 'use-resize-observer';\n\ninterface IPieceMapProps {\n  pieces: string;\n}\n\nconst PieceSize = 8;\nconst Margin = 1;\nconst FullSize = PieceSize + Margin;\n\nconst drawLegend = (context: CanvasRenderingContext2D, legendHeight: number) => {\n  const y = context.canvas.height - legendHeight / 2;\n  context.font = '12px sans-serif';\n  const pieceSize = PieceSize * 1.3;\n\n  const drawLegendItem = (fillStyle: string, x: number, text: string) => {\n    context.fillStyle = fillStyle;\n    context.fillRect(x, y, pieceSize, pieceSize);\n\n    context.fillStyle = 'black';\n    context.fillText(text, x + PieceSize * 2, y + pieceSize);\n  };\n\n  drawLegendItem('#4CAF50', 0, '- Done');\n  drawLegendItem('#ECEFF1', 70, '- Queued');\n  drawLegendItem('#F0B8B8', 170, '- Not selected');\n};\n\nconst draw = (parentDiv: HTMLDivElement, context: CanvasRenderingContext2D, pieces: string) => {\n  const parentWidth = parentDiv.clientWidth;\n  const piecesPerLine = Math.floor(parentWidth / FullSize);\n  const height = Math.ceil(pieces.length / piecesPerLine) * FullSize;\n  const legendHeight = 30;\n\n  const { canvas } = context;\n  canvas.width = parentWidth;\n  canvas.height = height + legendHeight;\n\n  for (let i = 0; i < pieces.length; i += 1) {\n    let pieceColor;\n\n    switch (pieces[i]) {\n      case '+':\n        pieceColor = '#4CAF50';\n        break;\n      case '-':\n        pieceColor = '#F0B8B8';\n        break;\n      default:\n        pieceColor = '#ECEFF1';\n        break;\n    }\n\n    context.fillStyle = pieceColor;\n    context.fillRect(FullSize * (i % piecesPerLine), Math.floor(i / piecesPerLine) * FullSize, PieceSize, PieceSize);\n  }\n\n  drawLegend(context, legendHeight);\n};\n\nconst PieceMap = ({ pieces }: IPieceMapProps): JSX.Element => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const parentDivRef = useRef<HTMLDivElement>(null);\n  const { width } = useResizeObserver<HTMLDivElement>({ ref: parentDivRef });\n  const [debouncedWidth] = useDebounce(width, 100);\n\n  useEffect(() => {\n    if (!debouncedWidth) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const parentDiv = parentDivRef.current;\n    if (!parentDiv) return;\n\n    draw(parentDiv, context, pieces);\n  }, [pieces, debouncedWidth]);\n\n  return (\n    <div ref={parentDivRef}>\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default PieceMap;\n","import prettyBytes from 'pretty-bytes';\nimport React, { useEffect, useState } from 'react';\nimport { Grid, GridColumn, GridRow, List, Tab } from 'semantic-ui-react';\nimport { ITorrent } from '../dataStructure';\nimport { getRefreshRate } from '../Services/settings';\nimport PieceMap from './piece-map';\n\ninterface ITorrentInfoItemProps {\n  torrent: ITorrent;\n}\n\ninterface Tree {\n  [key: string]: Tree;\n}\n\nconst getFileTree = (files: string[][]): Tree => {\n  const tree: Tree = {};\n\n  files.forEach((f) => {\n    let parentNode = tree;\n\n    for (let i = 0; i < f.length; i += 1) {\n      const pathChunk = f[i];\n\n      if (!(pathChunk in parentNode)) {\n        parentNode[pathChunk] = {};\n      }\n\n      parentNode = parentNode[pathChunk];\n    }\n  });\n\n  return tree;\n};\n\nconst renderFileTree = (files: string[][]): JSX.Element => {\n  const renderTree = (tree: Tree): JSX.Element[] =>\n    Object.keys(tree).map((k) => {\n      const isFolder = Object.keys(tree[k]).length > 0;\n\n      return (\n        <List.List key={k}>\n          <List.Item>\n            <List.Icon name={isFolder ? 'folder' : 'file'} />\n            <List.Content>\n              {isFolder ? <List.Header>{k}</List.Header> : <List.Description>{k}</List.Description>}\n              {renderTree(tree[k])}\n            </List.Content>\n          </List.Item>\n        </List.List>\n      );\n    });\n\n  const fileTree = getFileTree(files);\n  return (\n    <List>\n      <List.Item>\n        <List.Content>{renderTree(fileTree)}</List.Content>\n      </List.Item>\n    </List>\n  );\n};\n\nconst TorrentInfo = ({ torrent }: ITorrentInfoItemProps): JSX.Element => {\n  const [filesList, setFilesList] = useState<string[]>([]);\n  const [piecesList, setPiecesList] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getInfo = async () => {\n      const regexp = new RegExp('Files.+?:\\\\s+(?<files>.+?)\\\\n\\\\n.+?Pieces:\\\\s+(?<pieces>.+?)\\\\n\\\\n', 'gs');\n      const response = await fetch(`/info?torrentid=${torrent.id}&pieces=true&trackers=false`);\n      const info = await response.text();\n      const match = regexp.exec(info);\n      if (!match || !match.groups) return;\n\n      const { files, pieces } = match.groups;\n      setFilesList(files.split('\\n').map((f) => f.trim()));\n      setPiecesList(\n        pieces\n          .split('\\n')\n          .map((p) => p.trim())\n          .join(''),\n      );\n\n      setLoading(false);\n    };\n\n    void getInfo();\n    const intervalHandle = setInterval(() => void getInfo(), getRefreshRate());\n    return () => clearInterval(intervalHandle);\n  }, [torrent.id]);\n\n  const panes = [\n    {\n      menuItem: { key: 'general', content: 'General' },\n      render: () => (\n        <Tab.Pane>\n          <Grid>\n            <GridRow>\n              <GridColumn>\n                <div>\n                  <b>Name:</b> {torrent.name}\n                </div>\n                <div>\n                  <b>Size:</b> {torrent.size}\n                </div>\n                <div>\n                  <b>Completed:</b> {torrent.progress.toFixed(2)}%\n                </div>\n                <div>\n                  <b>Seed time:</b> {torrent.seeding_time}\n                </div>\n                <div>\n                  <b>Seed time limit:</b> {torrent.seed_time_limit}s\n                </div>\n                <div>\n                  <b>Total download:</b> {prettyBytes(torrent.total_download)}\n                </div>\n                <div>\n                  <b>Total upload:</b> {prettyBytes(torrent.total_upload)}\n                </div>\n              </GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'files', content: 'Files' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <Grid>\n            <GridRow>\n              <GridColumn>{renderFileTree(filesList.map((f) => f.split('/')))}</GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'pieces', content: 'Pieces' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <PieceMap pieces={piecesList} />\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Tab panes={panes} />\n    </>\n  );\n};\n\nexport default TorrentInfo;\n","import React, { useEffect, useState } from 'react';\nimport isEqual from 'react-fast-compare';\nimport HeaderMenu from './menu';\nimport SearchBar from './search-bar';\nimport TorrentList from './torrents-list';\nimport TorrentInfo from './torrent-info';\nimport { ITorrent, StatusCode } from './dataStructure';\nimport 'semantic-ui-css/semantic.min.css';\nimport './style.css';\nimport { getRefreshRate } from './Services/settings';\n\nfunction App(): JSX.Element {\n  const [torrents, setTorrents] = useState<ITorrent[]>([]);\n  const [activeTorrents, setActiveTorrents] = useState<ITorrent[]>([]);\n\n  useEffect(() => {\n    const getList = async () => {\n      const response = await fetch('/torrents/list');\n      const fetchedTorrents = (await response.json()) as ITorrent[];\n      setTorrents((t) => (isEqual(t, fetchedTorrents) ? t : fetchedTorrents));\n    };\n\n    void getList();\n    const intervalHandle = setInterval(() => void getList(), getRefreshRate());\n    return () => clearInterval(intervalHandle);\n  }, []);\n\n  return (\n    <div>\n      <HeaderMenu />\n      <div className=\"app\">\n        <SearchBar\n          totalDownloadRate={torrents.reduce((rate, item) => rate + item.download_rate, 0)}\n          totalUploadRate={torrents.reduce((rate, item) => rate + item.upload_rate, 0)}\n          active={torrents.filter((t) => t.status_code !== StatusCode.StatusFinished).length}\n          finished={torrents.filter((t) => t.status_code === StatusCode.StatusFinished).length}\n          total={torrents.length}\n        />\n        <TorrentList torrents={torrents} onSetActiveTorrents={setActiveTorrents} activeTorrents={activeTorrents} />\n        {activeTorrents.length > 0 && <TorrentInfo torrent={activeTorrents[activeTorrents.length - 1]} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}